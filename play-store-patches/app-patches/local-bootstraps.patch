--- a/termux-app/build.gradle.kts
+++ b/termux-app/build.gradle.kts
@@ -36,16 +36,6 @@ android {
         minSdk = minSdkVersion.toInt()
         targetSdk = targetSdkVersion.toInt()
         compileSdk = compileSdkVersion.toInt()
-
-        ndk {
-            abiFilters += listOf("armeabi-v7a", "arm64-v8a", "x86_64")
-        }
-
-        externalNativeBuild {
-            ndkBuild {
-                cFlags += listOf("-std=c11", "-Wall", "-Wextra", "-Werror", "-Os", "-fno-stack-protector", "-Wl,--gc-sections")
-            }
-        }
     }
 
     signingConfigs {
@@ -78,24 +68,12 @@ android {
         targetCompatibility = JavaVersion.VERSION_11
     }
 
-    externalNativeBuild {
-        ndkBuild {
-            path = File("src/main/cpp/Android.mk")
-        }
-    }
-
     testOptions {
         unitTests {
             isIncludeAndroidResources = true
         }
     }
 
-    packaging {
-        jniLibs {
-            useLegacyPackaging = true
-        }
-    }
-
     lint {
         warningsAsErrors = true
     }
@@ -112,89 +90,6 @@ tasks.register("versionName") {
     }
 }
 
-fun downloadFile(localUrl: String, remoteUrl: String, expectedChecksum: String) {
-    val digest = MessageDigest.getInstance("SHA-256")
-
-    val file = File(projectDir, localUrl)
-    if (file.exists()) {
-        val buffer = ByteArray(8192)
-        val input = FileInputStream(file)
-        while (true) {
-            val readBytes = input.read(buffer)
-            if (readBytes < 0) break
-            digest.update(buffer, 0, readBytes)
-        }
-        var checksum = BigInteger(1, digest.digest()).toString(16)
-        while (checksum.length < 64) { checksum = "0$checksum" }
-        if (checksum == expectedChecksum) {
-            return
-        } else {
-            logger.warn("Deleting old local file with wrong hash: $localUrl: expected: $expectedChecksum, actual: $checksum")
-            file.delete()
-        }
-    }
-
-    logger.quiet("Downloading $remoteUrl ...")
-
-    file.parentFile.mkdirs()
-    val out = BufferedOutputStream(FileOutputStream(file))
-
-    val connection = URI(remoteUrl).toURL().openConnection()
-    val digestStream = DigestInputStream(connection.inputStream, digest)
-    digestStream.transferTo(out)
-    out.close()
-
-    var checksum = BigInteger(1, digest.digest()).toString(16)
-    while (checksum.length < 64) { checksum = "0$checksum" }
-    if (checksum != expectedChecksum) {
-        file.delete()
-        throw GradleException("Wrong checksum for $remoteUrl:\n Expected: $expectedChecksum\n Actual:   $checksum")
-    }
-}
-
-tasks {
-    getByName<Delete>("clean") {
-        doLast {
-            val tree = fileTree(File(projectDir, "src/main/cpp"))
-            tree.include("bootstrap-*.zip")
-            tree.forEach { it.delete() }
-        }
-    }
-}
-
-tasks.register("downloadPrebuilt") {
-    doLast {
-        val bootstrapVersion = "2025.01.18-r1"
-        val arches = mapOf(
-            "aarch64" to "ce08316c5ab0610551c6b4a2c0d256073c0f47ec5d72a94f3895e3bd911f7aff",
-            "arm" to "ee54ef84c34da2084d388ee4132de357f8d514467339b69d56d78bbab0d0eb04",
-            "x86_64" to "dfc6d9d7e5b8dee126ab95a8fc528b53e4044588c3f5eacf428fe1e0aa0bf4e3"
-        )
-        arches.forEach { (arch, checksum) ->
-            val downloadTo = "src/main/cpp/bootstrap-${arch}.zip"
-            val url = "https://github.com/termux-play-store/termux-packages/releases/download/bootstrap-${bootstrapVersion}/bootstrap-${arch}.zip"
-            downloadFile(downloadTo, url, checksum)
-        }
-
-        val prootTag = "proot-2025.01.15-r2"
-        val prootVersion = "5.1.107-66"
-        var prootUrl = "https://github.com/termux-play-store/termux-packages/releases/download/${prootTag}/libproot-loader-ARCH-${prootVersion}.so"
-        downloadFile("src/main/jniLibs/armeabi-v7a/libproot-loader.so", prootUrl.replace("ARCH", "arm"), "eb1d64e9ef875039534ce7a8eeffa61bbc4c0ae5722cb48c9112816b43646a3e")
-        downloadFile("src/main/jniLibs/arm64-v8a/libproot-loader.so", prootUrl.replace("ARCH", "aarch64"), "8814b72f760cd26afe5350a1468cabb6622b4871064947733fcd9cd06f1c8cb8")
-        downloadFile("src/main/jniLibs/x86_64/libproot-loader.so", prootUrl.replace("ARCH", "x86_64"), "1a52cc9cc5fdecbf4235659ffeac8c51e4fefd7c75cc205f52d4884a3a0a0ba1")
-        prootUrl = "https://github.com/termux-play-store/termux-packages/releases/download/${prootTag}/libproot-loader32-ARCH-${prootVersion}.so"
-        downloadFile("src/main/jniLibs/arm64-v8a/libproot-loader32.so", prootUrl.replace("ARCH", "aarch64"), "ff56a5e3a37104f6778420d912e3edf31395c15d1528d28f0eb7d13a64481b99")
-        downloadFile("src/main/jniLibs/x86_64/libproot-loader32.so", prootUrl.replace("ARCH", "x86_64"), "5460a597e473f57f0d33405891e35ca24709173ca0a38805d395e3544ab8b1b4")
-    }
-}
-
-afterEvaluate {
-    android.applicationVariants.all { variant ->
-        variant.javaCompileProvider.dependsOn("downloadPrebuilt")
-        true
-    }
-}
-
 // https://stackoverflow.com/questions/75274720/a-failure-occurred-while-executing-appcheckdebugduplicateclasses/
 configurations.implementation {
    exclude("org.jetbrains.kotlin", "kotlin-stdlib-jdk8")
--- a/termux-app/src/main/java/com/termux/app/TermuxInstaller.java
+++ b/termux-app/src/main/java/com/termux/app/TermuxInstaller.java
@@ -6,6 +6,7 @@ import android.app.ProgressDialog;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.ApplicationInfo;
+import android.content.res.AssetManager;
 import android.os.Environment;
 import android.os.UserHandle;
 import android.os.UserManager;
@@ -23,7 +24,9 @@ import java.io.ByteArrayInputStream;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.io.OutputStream;
 import java.nio.file.Files;
 import java.util.ArrayList;
 import java.util.List;
@@ -102,9 +105,16 @@ final class TermuxInstaller {
 
                 final byte[] buffer = new byte[8096];
                 final List<Pair<String, String>> symlinks = new ArrayList<>(50);
+                AssetManager assetManager = activity.getApplicationContext().getAssets();
+                String architecture = System.getProperty("os.arch");
+                if (architecture.contains("arm")) {
+                    // 32-bit ARM
+                    architecture = "arm";
+                }
+                String bootstrapFilename = "bootstrap-" + architecture + ".zip";
+                InputStream inputStream = assetManager.open(bootstrapFilename);
 
-                final byte[] zipBytes = loadZipBytes();
-                try (ZipInputStream zipInput = new ZipInputStream(new ByteArrayInputStream(zipBytes))) {
+                try (ZipInputStream zipInput = new ZipInputStream(inputStream)) {
                     ZipEntry zipEntry;
                     while ((zipEntry = zipInput.getNextEntry()) != null) {
                         if (zipEntry.getName().equals("SYMLINKS.txt")) {
@@ -303,14 +309,6 @@ final class TermuxInstaller {
         return dir.delete();
     }
 
-    public static byte[] loadZipBytes() {
-        // Only load the shared library when necessary to save memory usage.
-        System.loadLibrary("termux-bootstrap");
-        return getZip();
-    }
-
-    public static native byte[] getZip();
-
     public static void setupAppLibSymlink(Context context) {
         var nativeLibraryDir = context.getApplicationInfo().nativeLibraryDir;
         var targetFile = new File(TermuxConstants.APP_LIB_PATH);
